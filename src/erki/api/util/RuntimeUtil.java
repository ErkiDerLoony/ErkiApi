/*
 * Â© Copyright 2007-2009 by Edgar Kalkowski (eMail@edgar-kalkowski.de)
 * 
 * This file is part of Erki's API.
 * 
 * Erki's API is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 3 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */

package erki.api.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * Provides utility methods for executing shell commands.
 * 
 * @author Edgar Kalkowski
 */
public class RuntimeUtil {
    
    /**
     * Executes a shell command and returns the stdout and stderr output.
     * 
     * @param cmd
     *        The command to execute.
     * @return The output of the shell command.
     * @throws IOException
     *         If the shell command cannot be executed or either stdout or
     *         stderr output of the shell command cannot be read.
     */
    public static RuntimeOutput getProcessResult(String cmd) throws IOException {
        Runtime r = Runtime.getRuntime();
        Process p = null;
        p = r.exec(cmd);
        BufferedReader pin = new BufferedReader(new InputStreamReader(p
                .getInputStream()));
        BufferedReader perr = new BufferedReader(new InputStreamReader(p
                .getErrorStream()));
        boolean processReturned = false;
        
        while (!processReturned) {
            
            try {
                p.waitFor();
                processReturned = true;
            } catch (InterruptedException e) {
            }
        }
        
        String stderr = "", stdout = "", line;
        
        while ((line = pin.readLine()) != null) {
            stdout = line + System.getProperty("line.separator");
        }
        
        if (stdout.length() > 0) {
            stdout = stdout.substring(0, stdout.length() - 1);
        }
        
        while ((line = perr.readLine()) != null) {
            stderr = line + System.getProperty("line.separator");
        }
        
        if (stderr.length() > 0) {
            stderr = stderr.substring(0, stderr.length() - 1);
        }
        
        return new RuntimeOutput(cmd, stdout, stderr);
    }
    
    /**
     * Execute a command asynchronously. This means do not wait until the
     * executed command terminates and thus return no output generated by the
     * command.
     * 
     * @param cmd
     *        The command to execute.
     */
    public static void execute(final String cmd) {
        
        new Thread() {
            
            @Override
            public void run() {
                super.run();
                
                try {
                    Runtime.getRuntime().exec(cmd);
                } catch (IOException e) {
                }
            }
            
        }.start();
    }
}
